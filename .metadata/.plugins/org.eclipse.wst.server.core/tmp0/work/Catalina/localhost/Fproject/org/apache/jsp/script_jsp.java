/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.38
 * Generated at: 2023-11-10 05:59:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class script_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("// Selecting necessary DOM elements\r\n");
      out.write("const captchaTextBox = document.querySelector(\".captch_box input\");\r\n");
      out.write("const refreshButton = document.querySelector(\".refresh_button\");\r\n");
      out.write("const captchaInputBox = document.querySelector(\".captch_input input\");\r\n");
      out.write("const message = document.querySelector(\".message\");\r\n");
      out.write("const submitButton = document.querySelector(\".button\");\r\n");
      out.write("\r\n");
      out.write("// Variable to store generated captcha\r\n");
      out.write("let captchaText = null;\r\n");
      out.write("\r\n");
      out.write("// Function to generate captcha\r\n");
      out.write("const generateCaptcha = () => {\r\n");
      out.write("  const randomString = Math.random().toString(36).substring(2, 7);\r\n");
      out.write("  const randomStringArray = randomString.split(\"\");\r\n");
      out.write("  const changeString = randomStringArray.map((char) => (Math.random() > 0.5 ? char.toUpperCase() : char));\r\n");
      out.write("  captchaText = changeString.join(\"   \");\r\n");
      out.write("  captchaTextBox.value = captchaText;\r\n");
      out.write("  console.log(captchaText);\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("const refreshBtnClick = () => {\r\n");
      out.write("  generateCaptcha();\r\n");
      out.write("  captchaInputBox.value = \"\";\r\n");
      out.write("  captchaKeyUpValidate();\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("const captchaKeyUpValidate = () => {\r\n");
      out.write("  //Toggle submit button disable class based on captcha input field.\r\n");
      out.write("  submitButton.classList.toggle(\"disabled\", !captchaInputBox.value);\r\n");
      out.write("\r\n");
      out.write("  if (!captchaInputBox.value) message.classList.remove(\"active\");\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("// Function to validate the entered captcha\r\n");
      out.write("const submitBtnClick = () => {\r\n");
      out.write("  captchaText = captchaText\r\n");
      out.write("    .split(\"\")\r\n");
      out.write("    .filter((char) => char !== \" \")\r\n");
      out.write("    .join(\"\");\r\n");
      out.write("  message.classList.add(\"active\");\r\n");
      out.write("  // Check if the entered captcha text is correct or not\r\n");
      out.write("  if (captchaInputBox.value === captchaText) {\r\n");
      out.write("    message.innerText = \"Entered captcha is correct\";\r\n");
      out.write("    message.style.color = \"#826afb\";\r\n");
      out.write("  } else {\r\n");
      out.write("    message.innerText = \"Entered captcha is not correct\";\r\n");
      out.write("    message.style.color = \"#FF2525\";\r\n");
      out.write("  }\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("// Add event listeners for the refresh button, captchaInputBox, submit button\r\n");
      out.write("refreshButton.addEventListener(\"click\", refreshBtnClick);\r\n");
      out.write("captchaInputBox.addEventListener(\"keyup\", captchaKeyUpValidate);\r\n");
      out.write("submitButton.addEventListener(\"click\", submitBtnClick);\r\n");
      out.write("\r\n");
      out.write("// Generate a captcha when the page loads\r\n");
      out.write("generateCaptcha();\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
